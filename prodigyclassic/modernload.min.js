var SW = SW || {};
SW.Load = {};
var prodigyWeb = {};
SW.Load.sendLoadStart = function () {
    window.loadStartTime = Date.now();
    var e = window.loadStartTime;
    "undefined" != typeof performance && "function" == typeof performance.now && (e += performance.now()),
    window.uuid = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (n) {
        const t = (e + 16 * Math.random()) % 16 | 0;
        return e = Math.floor(e / 16),
        ("x" === n ? t : 3 & t | 8).toString(16)
    });
    const n = window.location.host,
    t = window.location.search;
    var o,
    i = "local";
    n.indexOf("-qa") >= 0 || n.indexOf("dev.prodigygame.org") >= 0 ? (i = "local", o = "https://".concat(window.location.host)) : n.indexOf("prodigygame.net") >= 0 || t.indexOf("env=dev") >= 0 ? (i = "dev", o = "https://api.prodigygame.net") : n.indexOf("prodigygame.org") >= 0 || t.indexOf("env=staging") >= 0 ? (i = "staging", o = "https://api.prodigygame.org") : (n.indexOf("prodigygame.com") >= 0 || t.indexOf("env=production") >= 0 || t.indexOf("env=prod") >= 0) && (i = "production", o = "https://api.prodigygame.com");
    var a = "unknown",
    r = window.navigator.userAgent;
    r.indexOf("Opera") > -1 || r.indexOf("OPR") > -1 ? a = "Opera" : r.indexOf("Chrome") > -1 ? a = "Chrome" : r.indexOf("Safari") > -1 ? a = "Safari" : r.indexOf("Firefox") > -1 ? a = "Firefox" : r.indexOf("SamsungBrowser") > -1 ? a = "Samsung Internet for Android" : r.indexOf("Trident") > -1 ? a = "Internet Explorer" : r.indexOf("Edge") > -1 ? a = "Microsoft Edge" : r.indexOf("Silk") > -1 && (a = "Amazon Silk");
    var d;
    d = /iPad|iPhone|iPod/.test(navigator.platform) ? /nativeApp/.test(window.location.href) ? "iOS-App" : "iOS-Browser" : /Android/.test(navigator.platform) ? /nativeApp/.test(window.location.href) ? "Android-App" : "Android-Browser" : "Desktop-Browser";
    const s = {
        name: "anonymous_game_complete_v3",
        version: 3,
        uuid: window.uuid,
        timestamp: window.loadStartTime,
        timezone_offset: (new Date).getTimezoneOffset(),
        client_version: i,
        device_platform: d,
        browser: a,
        meta: {
            type: "login_screen_funnel",
            name: "load_start"
        }
    };
    o = o.concat("/events-api/v3/anonymous-events");
    const c = new XMLHttpRequest;
    c.open("POST", o),
    c.setRequestHeader("Content-Type", "application/json"),
    c.send(JSON.stringify({
            events: JSON.stringify([s])
        }))
}, SW.Load.getUrlVars = function () {
    var e = decodeURIComponent(window.location.href),
    n = {};
    e.replace(/[?&]+([^=&]+)=([^&]*)/gi, function (e, t, o) {
        n[t] = o.replace(/\+/g, " ")
    });
    return n
}, SW.Load.getUrlVar = function (e) {
    var n = SW.Load.getUrlVars();
    for (var t in n)
        if (t == e)
            return n[t];
    return !1
}, SW.Load.isProduction = function () {
    return document.domain.indexOf("prodigygame.com") >= 0
}, SW.Load.isStaging = function () {
    const e = document.domain,
    n = e.includes("prodigygame.org"),
    t = !e.includes("dev.prodigygame.org");
    return n && t
}, SW.Load.loadGameContainer = function () {
    var e = new SW.GameContainer;
    prodigyWeb.gameContainer = new SW.GameContainerView({
        model: e
    }),
    $("#web-templates").html(prodigyWeb.gameContainer.render())
}, SW.Load.getServiceURL = function () {
    return SW.Load.isProduction() ? "undefined" == typeof prodigyServiceUrl ? "https://www.prodigygame.com/" : prodigyServiceUrl : SW.Load.isStaging() ? "undefined" == typeof prodigyServiceUrl ? "https://www.prodigygame.org/" : prodigyServiceUrl : "undefined" == typeof prodigyServiceUrl ? "https://www.prodigygame.net/" : prodigyServiceUrl
}, SW.Load.getGameStatus = function () {
    _getGameStatus = function () {
        const n = new XMLHttpRequest;
        n.onreadystatechange = function () {
            if (n.readyState === XMLHttpRequest.DONE)
                if (200 === this.status) {
                    var t = n.response.data,
                    o = SW.Load.getUrlVar("feature") || "",
                    i = SW.Load.getUrlVar("release") || "",
                    a = "undefined" != typeof prodigyGameCodePath ? prodigyGameCodePath : t.gameCodePath;
                    window.gameApiStatusData = t,
                    o && (a = a.replace("dev", "feature/" + o), a = a.replace("staging", "feature/" + o)),
                    i && (a = a.replace(/production(.*)/, "production/" + i + "/"));
                    var r = "game.min.js";
                    "undefined" != typeof prodigyGameCodeFile && (r = prodigyGameCodeFile),
                    window.gameCodeFile = r;
                    var d = document.createElement("link");
                    d.relList && d.relList.supports("preload") && (d.href = r, d.rel = "preload", d.as = "script", document.head.appendChild(d)),
                    window.waitingOnResponse && (SW.Load.loadGameContainer(), window.waitingOnResponse = !1)
                } else
                    e > 0 ? (e--, _getGameStatus()) : window.statusErrored = !0
        };
        var t = SW.Load.getServiceURL() + "game-api";
        n.responseType = "json",
        n.open("GET", t + "/status", !0),
        n.send("")
    };
    var e = 3;
    _getGameStatus()
}, SW.Load.getEducationStatus = function () {
    _getEducationStatus = function () {
        const n = new XMLHttpRequest;
        n.onreadystatechange = function () {
            if (n.readyState === XMLHttpRequest.DONE)
                if (200 === this.status) {
                    var t,
                    o,
                    i = n.response.data;
                    "iOS" !== SW.Device.getOS() && "Android" !== SW.Device.getOS() && !SW.Device.isNativeApp() || SW.Device.isTablet() ? (t = _.find(i, {
                            id: "question-renderer"
                        }).path, o = _.find(i, {
                            id: "desktop-question-interface"
                        }).path) : (t = _.find(i, {
                            id: "mobile-question-renderer"
                        }).path, o = _.find(i, {
                            id: "mobile-question-interface"
                        }).path),
                    window.questionRendererURL = t,
                    window.questionInterfaceURL = o
                } else
                    e > 0 ? (e--, _getEducationStatus()) : window.statusErrored = !0
        };
        var t = SW.Load.getServiceURL() + "education-api";
        n.responseType = "json",
        n.open("GET", t + "/v1/frontend-paths", !0),
        n.send("")
    };
    var e = 3;
    _getEducationStatus()
}, SW.Load.loadGame = function () {
    window.onload = function () {
        document.addEventListener("contextmenu", function (e) {
            e.preventDefault()
        }, !1)
    },
    window.onresize = function () {
        scroll(0, 0)
    },
    window.gameApiStatusData ? SW.Load.loadGameContainer() : window.waitingOnResponse = !0,
    window.statusErrored && (window.statusErrored = !1, gameContainerModel.trigger("load:fail")),
    $(".announcement-close").click(function () {
        $("#service-announcement").remove()
    }),
    prodigyWeb.membershipFlow = {
        $el: $("#membership-flow"),
        $game: $("#game-wrapper"),
        student: {
            name: void 0,
            userID: void 0
        },
        closeCallback: void 0,
        open: function (e, n, t, o, i, a, r, d, s) {
            var c = function (e) {
                _.isObject(e.data) && "membership-iframe-closed" === e.data.type && (window.removeEventListener("message", c), this.close(e.data.success))
            }
            .bind(this);
            window.addEventListener("message", c);
            var p = sw.config.webUrl + "Membership?game=1&tag=" + o + "&username=" + e + "&id=" + n + "&funnelName=" + i + "&isPlayingFromHome=" + a + "&metaData=" + r + "&utm_source=" + i + "&utm_medium=game&utm_campaign=" + s + "&token=" + d,
            g = $('<iframe src="' + p + '">');
            this.student.name = e,
            this.student.userID = n,
            this.closeCallback = t,
            this.$el.show().append(g),
            this.$game.hide()
        },
        close: function (e) {
            this.$el.hide().html(""),
            this.$game.show(),
            window.postMessage(JSON.stringify({
                    name: "membership-flow-closed",
                    success: e
                }), "*"),
            _.isUndefined(this.closeCallback) || this.closeCallback(e)
        }
    },
    SW.Device.isIOS() && prodigyWeb.membershipFlow.$el.addClass("iframe-ios-fix"),
    prodigyWeb.getClassCode = {
        open: function (e) {
            var n = new SW.GetClassCodeModalView({
                model: new SW.GetClassCodeModal
            });
            n.callback = e,
            n.render()
        }
    },
    $(document).ready(function () {
        prodigyWeb.gameDialogManager = new SW.GameDialogManager,
        (SW.Device.isDeprecatedIpad() || SW.Device.isDeprecatedIphone()) && prodigyWeb.gameDialogManager.openDeviceDeprecatedWarning()
    })
}, SW.Load.getDeviceInformationFromAPI = function () {
    if (!SW.Storage.get("device-information")) {
        const e = new XMLHttpRequest;
        var n = SW.Load.getServiceURL() + "device-detect-api/v1/information?";
        n = n + "user_agent=" + navigator.userAgent,
        "undefined" != typeof DeviceAtlas && (n = n + "&properties=" + encodeURIComponent(DeviceAtlas.getPropertiesAsString())),
        e.onreadystatechange = function () {
            if (e.readyState === XMLHttpRequest.DONE && 200 === this.status) {
                const n = e.response;
                n && n.model && SW.Storage.set("device-information", e.response)
            }
        },
        e.responseType = "json",
        e.open("GET", n, !0),
        e.send("")
    }
};
